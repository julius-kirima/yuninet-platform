// üìÇ lib/services/gemini_service.dart
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter_dotenv/flutter_dotenv.dart';

class GeminiService {
  // Load API key from .env
  static final String? _apiKey = dotenv.env['API_KEY'];

  /// Send a message to the Gemini API and return the response
  static Future<String> sendMessage(String message,
      {String model = "gemini-1.5-flash"}) async {
    if (_apiKey == null || _apiKey!.isEmpty) {
      throw Exception("‚ùå API Key not found. Check your .env file.");
    }

    // ‚úÖ Always use v1beta endpoint for 1.5 models
    final String baseUrl = "https://generativelanguage.googleapis.com/v1beta";

    final url = Uri.parse(
      "$baseUrl/models/$model:generateContent?key=$_apiKey",
    );

    try {
      final response = await http.post(
        url,
        headers: {"Content-Type": "application/json"},
        body: jsonEncode({
          "contents": [
            {
              "parts": [
                {"text": message}
              ]
            }
          ]
        }),
      );

      // Debug raw response
      print("üîé RAW RESPONSE (${response.statusCode}): ${response.body}");

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);

        // Safely parse candidates
        if (data['candidates'] != null &&
            data['candidates'].isNotEmpty &&
            data['candidates'][0]['content'] != null &&
            data['candidates'][0]['content']['parts'] != null) {
          final parts = data['candidates'][0]['content']['parts'] as List;
          if (parts.isNotEmpty && parts[0]['text'] != null) {
            return parts[0]['text'];
          }
        }

        return "‚ö†Ô∏è No valid response generated by AI.";
      } else {
        throw Exception("‚ùå Failed [${response.statusCode}]: ${response.body}");
      }
    } catch (e) {
      print("GeminiService error: $e");
      throw Exception("‚ö†Ô∏è Could not connect to Gemini API. $e");
    }
  }
}
