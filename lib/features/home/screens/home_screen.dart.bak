// ignore_for_file: deprecated_member_use

import 'dart:io';
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:video_player/video_player.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:share_plus/share_plus.dart';
import 'package:dio/dio.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:path_provider/path_provider.dart';
import 'package:image_gallery_saver/image_gallery_saver.dart';

import 'package:yuninet_app/features/ai/screens/ai_screen.dart';
import 'package:yuninet_app/screens/smart_hub_screen.dart';
import 'package:yuninet_app/routes/app_routes.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  final supabase = Supabase.instance.client;
  bool _loading = true;
  List<Map<String, dynamic>> _posts = [];
  final PageController _pageController = PageController();
  int _currentPageIndex = 0;
  int _navIndex = 0;
  List<VideoPlayerController> _videoControllers = [];

  Map<String, bool> _userLikedPosts = {};
  Map<String, bool> _userFollowing = {};
  Map<String, int> _likesCount = {};
  Map<String, int> _commentsCount = {};
  Map<String, int> _sharesCount = {};
  Map<String, int> _followersCount = {};

  // üîπ Realtime channels
  RealtimeChannel? _likesChannel;
  RealtimeChannel? _followsChannel;
  RealtimeChannel? _commentsChannel;
  RealtimeChannel? _visibilityChannel;

  @override
  void initState() {
    super.initState();
    _fetchPosts();
    _subscribeToRealTime();
  }

  @override
  void dispose() {
    for (var controller in _videoControllers) {
      controller.dispose();
    }
    _pageController.dispose();
    _unsubscribeFromRealTime();
    super.dispose();
  }

  Future<void> _fetchPosts() async {
    try {
      final response = await supabase
          .from('posts')
          .select()
          .order('created_at', ascending: false);

      setState(() {
        _posts = List<Map<String, dynamic>>.from(response);
      });

      _initVideoControllers();
      _initPostStats();
    } catch (e) {
      debugPrint('Error fetching posts: $e');
    } finally {
      if (mounted) setState(() => _loading = false);
    }
  }

  void _initVideoControllers() {
    for (var c in _videoControllers) {
      c.dispose();
    }

    _videoControllers = _posts
        .map((post) {
          if (post['type'] == 'video' && post['file_url'] != null) {
            final url = post['file_url'].toString();
            return VideoPlayerController.networkUrl(Uri.parse(url))
              ..initialize().then((_) {
                if (mounted) setState(() {});
              });
          }
          return null;
        })
        .whereType<VideoPlayerController>()
        .toList();

    if (_videoControllers.isNotEmpty) _videoControllers.first.play();
  }

  Future<void> _initPostStats() async {
    final currentUser = supabase.auth.currentUser;
    if (currentUser == null) return;

    for (var post in _posts) {
      final postId = post['id'].toString();
      final postUserId = post['user_id'].toString();

      // Likes
      final likesResp =
          await supabase.from('likes').select('id').eq('post_id', post['id']);
      _likesCount[postId] = (likesResp as List).length;

      final likedResp = await supabase
          .from('likes')
          .select()
          .eq('post_id', post['id'])
          .eq('user_id', currentUser.id);
      _userLikedPosts[postId] = (likedResp as List).isNotEmpty;

      // Comments
      final commentsResp = await supabase
          .from('comments')
          .select('id')
          .eq('post_id', post['id']);
      _commentsCount[postId] = (commentsResp as List).length;

      // Shares
      final sharesResp =
          await supabase.from('shares').select('id').eq('post_id', post['id']);
      _sharesCount[postId] = (sharesResp as List).length;

      // Followers
      final followersResp = await supabase
          .from('follows')
          .select('id')
          .eq('following_id', postUserId);
      _followersCount[postUserId] = (followersResp as List).length;

      // Following
      final followResp = await supabase
          .from('follows')
          .select('id')
          .eq('following_id', postUserId)
          .eq('follower_id', currentUser.id);
      _userFollowing[postUserId] = (followResp as List).isNotEmpty;
    }

    if (mounted) setState(() {});
  }

  void _onPageChanged(int index) {
    setState(() => _currentPageIndex = index);
    for (var i = 0; i < _videoControllers.length; i++) {
      try {
        i == index ? _videoControllers[i].play() : _videoControllers[i].pause();
      } catch (_) {}
    }
  }

  Future<void> _toggleLike(String postId) async {
    final currentUser = supabase.auth.currentUser;
    if (currentUser == null) return;

    final liked = _userLikedPosts[postId] ?? false;

    if (liked) {
      await supabase
          .from('likes')
          .delete()
          .eq('post_id', postId)
          .eq('user_id', currentUser.id);
      _likesCount[postId] = (_likesCount[postId] ?? 1) - 1;
    } else {
      await supabase.from('likes').insert({
        'post_id': postId,
        'user_id': currentUser.id,
      });
      _likesCount[postId] = (_likesCount[postId] ?? 0) + 1;
    }

    _userLikedPosts[postId] = !liked;
    setState(() {});
  }

  Future<void> _toggleFollow(String userId) async {
    final currentUser = supabase.auth.currentUser;
    if (currentUser == null) return;

    final following = _userFollowing[userId] ?? false;

    if (following) {
      await supabase
          .from('follows')
          .delete()
          .eq('follower_id', currentUser.id)
          .eq('following_id', userId);
      _followersCount[userId] = (_followersCount[userId] ?? 1) - 1;
    } else {
      await supabase.from('follows').insert({
        'follower_id': currentUser.id,
        'following_id': userId,
      });
      _followersCount[userId] = (_followersCount[userId] ?? 0) + 1;
    }

    _userFollowing[userId] = !following;
    setState(() {});
  }

  Future<void> _updateVisibility(String postId, String visibility) async {
    try {
      await supabase
          .from('posts')
          .update({'visibility': visibility}).eq('id', postId);

      final index = _posts.indexWhere((p) => p['id'].toString() == postId);
      if (index != -1) {
        _posts[index]['visibility'] = visibility;
        setState(() {});
      }

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Post visibility updated: $visibility')),
      );
    } catch (e) {
      debugPrint("Visibility update error: $e");
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Failed to update visibility')),
      );
    }
  }

  Future<bool> _requestStoragePermission() async {
    try {
      if (Platform.isAndroid) {
        final status = await Permission.storage.status;
        if (status.isGranted) return true;
        final result = await Permission.storage.request();
        return result.isGranted;
      } else if (Platform.isIOS || Platform.isMacOS) {
        final result = await Permission.photos.request();
        return result.isGranted;
      } else {
        return true;
      }
    } catch (e) {
      debugPrint("Permission request error: $e");
      return false;
    }
  }

  Future<bool> _saveFile(String filePath) async {
    try {
      final result = await ImageGallerySaver.saveFile(filePath);
      return result != null && result['isSuccess'] == true;
    } catch (e) {
      debugPrint("Save error: $e");
      return false;
    }
  }

  Future<void> _downloadPost(Map<String, dynamic> post) async {
    final urlValue = post['file_url'];
    final type = (post['type'] ?? '').toString();
    if (urlValue == null || urlValue.isEmpty) return;

    if (!await _requestStoragePermission()) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("Storage permission denied")),
      );
      return;
    }

    try {
      final tempDir = await getTemporaryDirectory();
      final extension = type == 'image'
          ? 'jpg'
          : type == 'video'
              ? 'mp4'
              : 'dat';
      final filePath =
          '${tempDir.path}/yuninet_${DateTime.now().millisecondsSinceEpoch}.$extension';
      await Dio().download(urlValue, filePath);

      final saved = await _saveFile(filePath);

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
            content: Text(
                saved ? "Downloaded successfully üéâ" : "Download failed ‚ùå")),
      );
    } catch (e) {
      debugPrint("Download error: $e");
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("Download failed ‚ùå")),
      );
    }
  }

  void _showPostOptions(Map<String, dynamic> post) {
    final currentUser = supabase.auth.currentUser;

    showModalBottomSheet(
      context: context,
      builder: (_) => Wrap(
        children: [
          ListTile(
            leading: const Icon(Icons.download),
            title: const Text("Download"),
            onTap: () {
              Navigator.pop(context);
              _downloadPost(post);
            },
          ),
          ListTile(
            leading: const Icon(Icons.share),
            title: const Text("Share"),
            onTap: () {
              Navigator.pop(context);
              if (post['file_url'] != null)
                Share.share('Check this: ${post['file_url']}');
            },
          ),
          ListTile(
            leading: const Icon(Icons.lock),
            title: const Text("Who can see this"),
            subtitle: Text('Current: ${post['visibility'] ?? 'public'}'),
            onTap: () {
              Navigator.pop(context);
              _showVisibilityDialog(post);
            },
          ),
          if (post['user_id'] == currentUser?.id) ...[
            ListTile(
              leading: const Icon(Icons.delete),
              title: const Text("Delete Post"),
              onTap: () async {
                Navigator.pop(context);
                await supabase.from('posts').delete().eq('id', post['id']);
                _fetchPosts();
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('Post deleted')),
                );
              },
            ),
          ] else ...[
            ListTile(
              leading: const Icon(Icons.flag),
              title: const Text("Report Post"),
              onTap: () async {
                Navigator.pop(context);
                await supabase.from('reports').insert({
                  'post_id': post['id'],
                  'reported_by': currentUser?.id,
                  'reason': 'Inappropriate content',
                  'created_at': DateTime.now().toIso8601String(),
                });
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('Post reported')),
                );
              },
            ),
          ]
        ],
      ),
    );
  }

  void _showVisibilityDialog(Map<String, dynamic> post) {
    final options = ['public', 'friends', 'private'];
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text("Select Post Visibility"),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: options
              .map(
                (v) => ListTile(
                  title: Text(v[0].toUpperCase() + v.substring(1)),
                  onTap: () {
                    Navigator.pop(context);
                    _updateVisibility(post['id'].toString(), v);
                  },
                ),
              )
              .toList(),
        ),
      ),
    );
  }

  Future<void> _signOut() async {
    await supabase.auth.signOut();
    if (mounted) Navigator.pushReplacementNamed(context, AppRoutes.login);
  }

  // ---------------- REAL-TIME ----------------
  void _subscribeToRealTime() {
    // Likes channel
    _likesChannel = supabase.channel('likes_channel')
      ..onPostgresChanges(
        table: 'likes',
        schema: 'public',
        event: '*',
        callback: (PostgresChangeEvent event) => _fetchPosts(),
      )
      ..subscribe();

    // Follows channel
    _followsChannel = supabase.channel('follows_channel')
      ..onPostgresChanges(
        table: 'follows',
        schema: 'public',
        event: '*',
        callback: (PostgresChangeEvent event) => _fetchPosts(),
      )
      ..subscribe();

    // Comments channel
    _commentsChannel = supabase.channel('comments_channel')
      ..onPostgresChanges(
        table: 'comments',
        schema: 'public',
        event: '*',
        callback: (PostgresChangeEvent event) => _fetchPosts(),
      )
      ..subscribe();

    // Posts visibility channel
    _visibilityChannel = supabase.channel('posts_channel')
      ..onPostgresChanges(
        table: 'posts',
        schema: 'public',
        event: '*',
        callback: (PostgresChangeEvent event) => _fetchPosts(),
      )
      ..subscribe();
  }

  void _unsubscribeFromRealTime() {
    _likesChannel?.unsubscribe();
    _followsChannel?.unsubscribe();
    _commentsChannel?.unsubscribe();
    _visibilityChannel?.unsubscribe();
  }

  // ---------------- BUILD POST ----------------
  Widget _buildPost(Map<String, dynamic> post, int index) {
    final type = post['type'] ?? 'text';
    final content = post['content'];
    final url = post['file_url'];

    return Stack(
      children: [
        Container(
          color: Colors.black,
          child: Center(
            child: type == 'video'
                ? _buildVideo(index)
                : type == 'image'
                    ? _buildImage(url)
                    : _buildOther(type, content, url),
          ),
        ),
        _buildOverlay(post),
        Positioned(
          top: 40,
          left: 20,
          child: Text('${_currentPageIndex + 1}/${_posts.length}',
              style: const TextStyle(color: Colors.white70, fontSize: 16)),
        ),
      ],
    );
  }

  Widget _buildVideo(int index) {
    if (_videoControllers.length <= index) return const SizedBox.shrink();
    final controller = _videoControllers[index];

    return controller.value.isInitialized
        ? GestureDetector(
            onTap: () => setState(() {
              controller.value.isPlaying
                  ? controller.pause()
                  : controller.play();
            }),
            child: Stack(
              alignment: Alignment.center,
              children: [
                SizedBox(
                  width: double.infinity,
                  height: 500,
                  child: FittedBox(
                    fit: BoxFit.cover,
                    child: SizedBox(
                      width: controller.value.size.width,
                      height: controller.value.size.height,
                      child: VideoPlayer(controller),
                    ),
                  ),
                ),
                if (!controller.value.isPlaying)
                  const Icon(Icons.play_circle_fill,
                      size: 80, color: Colors.white70),
              ],
            ),
          )
        : const Center(child: CircularProgressIndicator());
  }

  Widget _buildImage(String? url) {
    return url == null
        ? const Icon(Icons.broken_image, size: 100, color: Colors.white38)
        : SizedBox(
            height: 500,
            child: Image.network(url,
                fit: BoxFit.cover,
                errorBuilder: (_, __, ___) =>
                    const Icon(Icons.broken_image, size: 80)),
          );
  }

  Widget _buildOther(String type, String? content, String? url) {
    switch (type) {
      case 'text':
        return Padding(
          padding: const EdgeInsets.all(16),
          child: Text(content ?? '',
              style: const TextStyle(color: Colors.white, fontSize: 20),
              textAlign: TextAlign.center),
        );
      case 'pdf':
      case 'link':
        return ListTile(
          title: Text(type == 'pdf' ? 'üìÑ PDF Document' : 'üîó Link',
              style: const TextStyle(color: Colors.white)),
          subtitle:
              Text(url ?? '', style: const TextStyle(color: Colors.white70)),
          onTap: () {
            if (url != null) launchUrl(Uri.parse(url));
          },
        );
      default:
        return const SizedBox.shrink();
    }
  }

  Widget _buildOverlay(Map<String, dynamic> post) {
    final postId = post['id'].toString();
    final userId = post['user_id'].toString();
    final url = post['file_url'];

    final liked = _userLikedPosts[postId] ?? false;
    final following = _userFollowing[userId] ?? false;
    final likes = _likesCount[postId] ?? 0;
    final comments = _commentsCount[postId] ?? 0;
    final shares = _sharesCount[postId] ?? 0;
    final followers = _followersCount[userId] ?? 0;

    return Positioned(
      right: 16,
      bottom: 100,
      child: Column(
        children: [
          Stack(
            alignment: Alignment.bottomRight,
            children: [
              GestureDetector(
                onTap: () => Navigator.pushNamed(context, AppRoutes.profile),
                child: const CircleAvatar(
                  backgroundImage:
                      NetworkImage("https://via.placeholder.com/150"),
                  radius: 25,
                ),
              ),
              Positioned(
                bottom: 0,
                right: 0,
                child: GestureDetector(
                  onTap: () => _toggleFollow(userId),
                  child: Container(
                    decoration: BoxDecoration(
                      color: following ? Colors.green : Colors.blue,
                      shape: BoxShape.circle,
                    ),
                    padding: const EdgeInsets.all(2),
                    child: Icon(following ? Icons.check : Icons.add,
                        size: 16, color: Colors.white),
                  ),
                ),
              ),
            ],
          ),
          Text('$followers', style: const TextStyle(color: Colors.white)),
          const SizedBox(height: 16),
          Column(
            children: [
              IconButton(
                icon: Icon(Icons.favorite,
                    color: liked ? Colors.red : Colors.white, size: 32),
                onPressed: () => _toggleLike(postId),
              ),
              Text('$likes', style: const TextStyle(color: Colors.white)),
              const SizedBox(height: 8),
              IconButton(
                icon: const Icon(Icons.comment, color: Colors.white, size: 32),
                onPressed: () {
                  Navigator.pushNamed(context, AppRoutes.comments,
                      arguments: {'postId': postId});
                },
              ),
              Text('$comments', style: const TextStyle(color: Colors.white)),
              const SizedBox(height: 8),
              IconButton(
                icon: const Icon(Icons.share, color: Colors.white, size: 32),
                onPressed: () async {
                  if (url != null && url.isNotEmpty) {
                    await Share.share('Check out this post: $url');
                    _sharesCount[postId] = (_sharesCount[postId] ?? 0) + 1;
                    setState(() {});
                  }
                },
              ),
              Text('$shares', style: const TextStyle(color: Colors.white)),
              const SizedBox(height: 8),
              IconButton(
                  icon: const Icon(Icons.more_vert,
                      color: Colors.white, size: 32),
                  onPressed: () => _showPostOptions(post)),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildMainBody() {
    switch (_navIndex) {
      case 0: // Home
        return _loading
            ? const Center(child: CircularProgressIndicator())
            : Center(
                child: ConstrainedBox(
                  constraints: const BoxConstraints(maxWidth: 400),
                  child: PageView.builder(
                    scrollDirection: Axis.vertical,
                    controller: _pageController,
                    onPageChanged: _onPageChanged,
                    itemCount: _posts.length,
                    itemBuilder: (context, index) =>
                        _buildPost(_posts[index], index),
                  ),
                ),
              );
      case 1:
        return const Center(
            child: Text("Chat", style: TextStyle(color: Colors.white)));
      case 2:
        Future.microtask(() {
          if (mounted) {
            Navigator.pushNamed(context, AppRoutes.createPost);
            setState(() => _navIndex = 0);
          }
        });
        return const SizedBox();
      case 3:
        return const AIScreen();
      case 4:
        return const SmartHubScreen();
      case 5:
        Future.microtask(() {
          if (mounted) {
            Navigator.pushNamed(context, AppRoutes.profile);
            setState(() => _navIndex = 0);
          }
        });
        return const SizedBox();
      default:
        return const SizedBox();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        title: const Text('Yuninet Home'),
        actions: [
          IconButton(icon: const Icon(Icons.logout), onPressed: _signOut),
        ],
      ),
      body: _buildMainBody(),
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _navIndex,
        backgroundColor: Colors.black,
        selectedItemColor: Colors.white,
        unselectedItemColor: Colors.cyanAccent,
        selectedLabelStyle: const TextStyle(fontWeight: FontWeight.bold),
        unselectedLabelStyle: const TextStyle(fontWeight: FontWeight.bold),
        iconSize: 28,
        type: BottomNavigationBarType.fixed,
        onTap: (index) => setState(() => _navIndex = index),
        items: const [
          BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),
          BottomNavigationBarItem(
              icon: Icon(Icons.chat_bubble_outline), label: 'Chat'),
          BottomNavigationBarItem(
              icon: Icon(Icons.add_circle, size: 48), label: ''),
          BottomNavigationBarItem(icon: Icon(Icons.smart_toy), label: 'AI'),
          BottomNavigationBarItem(icon: Icon(Icons.school), label: 'SmartHub'),
          BottomNavigationBarItem(
              icon: Icon(Icons.person_outline), label: 'Profile'),
        ],
      ),
    );
  }
}
